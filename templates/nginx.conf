client_max_body_size 32M;

## ============== ##
## Default Server ##
## ============== ##

server {
    ## Default server (any request that does not match an explicitly defined hostname).
    listen 80 default_server;
    listen [::]:80 default_server;
    ## This is just an invalid value which will never trigger on a real hostname.
    server_name _;
    ## Nginx is running inside a container, send access and error logs to STDOUT
    ## (Process file-descriptor 1) and STDERR (Process file-descriptor 2) respectively.
    access_log /proc/self/fd/1;
    error_log /proc/self/fd/2;
    ## HTTP/503 (Service Not Available).
    return 503;
}

## ================= ##
## Container Servers ##
## ================= ##

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
# ------------------------------------------------------------------------------

    upstream {{ $host }} {
        {{ template "upstream" $containers }}
    }
    {{ template "standardize_protodomain" $host }}

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ $host }};
        server_tokens off;
        proxy_buffering off;
        {{ template "ssl" $host }}

        location ~/\.ht {
            deny all;
        }

        ## Proxy every request to the container.
        location / {
            {{ $container := index $containers 0 }}
            {{ if $container.Env.VIRTUAL_PORT }}
                {{ if eq $container.Env.VIRTUAL_PORT "443" }}
                    proxy_pass https://{{ trim $host }};
                {{ else }}
                    proxy_pass http://{{ trim $host }};
                {{ end }}
            {{ else }}
                proxy_pass http://{{ trim $host }};
            {{ end }}

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    {{ if $container.Env.ALIASES }}
        ## ============== ##
        ## Server Aliases ##
        ## ============== ##
        {{ range $i, $alias := split $container.Env.ALIASES "," }}
            server {
                listen 80;
                listen [::]:80;
                server_name www.{{ trim $alias }} {{ trim $alias }};
                server_tokens off;
                return 307 https://{{ trim $host }}$request_uri;
            }
            server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name www.{{ trim $alias }} {{ trim $alias }};
                server_tokens off;
                {{ template "ssl" $alias }}
                return 307 https://{{ trim $host }}$request_uri;
            }
        {{ end }}
    {{ end }}

{{ end }}

## ============================== ##
## Configuration Template Layouts ##
## ============================== ##

{{ define "upstream" }}
    {{ $container := index . 0 }}
    {{ $addressLength := len $container.Addresses }}
    {{ $network := index $container.Networks 0 }}

    {{ if eq $addressLength 1 }}
        ## If only one port on the container has been exposed, use that.
        {{ with $address := index $container.Addresses 0 }}
            ## Container: {{ $container.Name }}
            server {{ $network.IP }}:{{ $address.Port }};
        {{ end }}
    {{ else if $container.Env.VIRTUAL_PORT }}
        ## If a port has been specified, use that IF port is exposed.
        {{ range $i, $address := $container.Addresses }}
            {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
                ## Container: {{ $container.Name }}
                server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ else }}
        ## Otherwise default to port 80 IF port 80 is exposed.
        {{ range $i, $address := $container.Addresses }}
            {{ if eq $address.Port "80" }}
                ## Container: {{ $container.Name }}
                server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    ## If no port has been declared for upstream by now, tough shit.
    {{ end }}
{{ end }}

{{ define "ssl" }}
    ## SSL Configuration
        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 180m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ## OCSP Stapling (Certificate Revocation Check)
        ssl_stapling on;
        ssl_stapling_verify on;
        ## Add a DNS resolver for stapling (using Google's DNS here).
        resolver 8.8.4.4 8.8.8.8;
        ## The following is for forward-secrecy between server and client so that
        ## previous requests cannot be decrypted even if the servers private keys get
        ## compromised in the future. This file is not generated by default and must
        ## be done manually (uncomment ssl_dhparam once complete):
        ##   [docker exec nginx] openssl dhparam -out /etc/nginx/dhparam.pem 2048
        # ssl_dhparam /etc/nginx/dhparam.pem;
        ## Remember to mount host directory "/etc/letsencrypt" to access SSL certificates.
        ssl_certificate /etc/letsencrypt/live/{{ trim . }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ trim . }}/privkey.pem;
    ## Security Headers
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Frame-Options SAMEORIGIN;
        ## The following header is DANGEROUS. Once set, browsers will refuse to serve
        ## over non-SSL HTTP. LOLz, let's do it anyway ^_^
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
{{ end }}

{{ define "standardize_protodomain" }}
    ## Always redirect to HTTPS.
    server {
        listen 80;
        listen [::]:80;
        server_name www.{{ trim . }} {{ trim . }};
        server_tokens off;
        return 307 https://{{ trim . }}$request_uri;
    }
    ## Always remove the "www" subdomain. It's an outdated convention from the
    ## 90's and I don't like it. This is a requirement because I say so. No buts.
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.{{ trim . }};
        server_tokens off;
        {{ template "ssl" . }}
        return 307 https://{{ trim . }}$request_uri;
    }
{{ end }}
