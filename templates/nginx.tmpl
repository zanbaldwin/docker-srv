client_max_body_size 32M;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;
    return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
# ------------------------------------------------------------------------------
    upstream {{ $host }} {
        {{ range $index, $value := $containers }}
            {{ $addrLen := len $value.Addresses }}
            {{ $network := index $value.Networks 0 }}
            {{/* If only 1 port exposed, use that */}}
            {{ if eq $addrLen 1 }}
                {{ with $address := index $value.Addresses 0 }}
                    # {{$value.Name}}
                    server {{ $network.IP }}:{{ $address.Port }};
                {{ end }}
            {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
            {{ else if $value.Env.VIRTUAL_PORT }}
                {{ range $i, $address := $value.Addresses }}
                    {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
                        # {{$value.Name}}
                        server {{ $network.IP }}:{{ $address.Port }};
                    {{ end }}
                {{ end }}
            {{/* Else default to standard web port 80 */}}
            {{ else }}
                {{ range $i, $address := $value.Addresses }}
                    {{ if eq $address.Port "80" }}
                        # {{$value.Name}}
                        server {{ $network.IP }}:{{ $address.Port }};
                    {{ end }}
                {{ end }}
            {{ end }}
        {{ end }}
    }

    server {
        listen 80;
        listen [::]:80;
        server_name www.{{ $host }} {{ $host }};
        server_tokens off;
        return 307 https://{{ $host }}$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.{{ $host }};
        server_tokens off;

        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 180m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        # ssl_dhparam /etc/nginx/cert/dhparam.pem;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        ssl_certificate /etc/letsencrypt/live/{{ $host }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ $host }}/privkey.pem;

        return 307 https://{{ $host }}$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ $host }};
        server_tokens off;
        proxy_buffering off;

        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 180m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        # ssl_dhparam /etc/nginx/cert/dhparam.pem;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        ssl_certificate /etc/letsencrypt/live/{{ $host }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ $host }}/privkey.pem;

        location ~/\.ht {
            deny all;
        }

        # Proxy every request to the container.
        location / {
            {{ $container := index $containers 0 }}
            {{ if $container.Env.VIRTUAL_PORT }}
                {{ if eq $container.Env.VIRTUAL_PORT "443" }}
                    proxy_pass https://{{ trim $host }};
                {{ else }}
                    proxy_pass http://{{ trim $host }};
                {{ end }}
            {{ else }}
                proxy_pass http://{{ trim $host }};
            {{ end }}

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    }
{{ end }}

